{"version":3,"sources":["List.js","Loading.js","App.js","serviceWorker.js","index.js"],"names":["App","props","ListItem","button","component","href","link","ListItemText","primary","name","Loading","isActive","getAllList","a","fetch","response","json","body","status","Error","message","postList","data","state","inputName","inputLink","console","log","method","headers","JSON","stringify","links","loading","handleInputLink","bind","handleInputName","handleSubmit","this","then","res","setState","reverse","catch","err","event","target","value","updatedList","unshift","list","map","index","List","key","Divider","Container","Grid","container","spacing","item","xs","TextField","id","onChange","label","variant","fullWidth","Button","onClick","color","size","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.efc80a7a.chunk.js","sourcesContent":["import React from 'react'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\n\nfunction App(props) {\n  return (\n    <ListItem button component=\"a\" href={props.link}>\n      <ListItemText primary={props.name + ' - ' + props.link}/>\n    </ListItem>\n  )\n}\n\nexport default App","import React from 'react'\n\nfunction Loading(props) {\n    if(props.isActive) {\n        return <p>Loading...</p>\n    } else {\n        return <div></div>\n    }\n}\n\nexport default Loading","import React from 'react'\nimport ListItem from './List'\nimport Container from '@material-ui/core/Container'\nimport List from '@material-ui/core/List'\nimport Divider from '@material-ui/core/Divider'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Loading from './Loading'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      links: [],\n      loading: true,\n      inputName: '',\n      inputLink: '',\n    }\n\n    this.handleInputLink = this.handleInputLink.bind(this)\n    this.handleInputName = this.handleInputName.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  componentDidMount() {\n    this.getAllList()\n      .then(res => {\n        console.log(res)\n        this.setState({ links: res.reverse() })\n        this.setState({ loading: false })\n      })\n      .catch(err => console.log(err))\n  }\n\n  getAllList = async () => {\n    const response = await fetch('https://take-me-to-server.herokuapp.com/links')\n    const body = await response.json()\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body\n  }\n\n  postList = async () => {\n    const data = {\n      name: this.state.inputName,\n      link: this.state.inputLink,\n    }\n    console.log(data)\n    const response = await fetch('https://take-me-to-server.herokuapp.com/links', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n    const body = await response.json()\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body\n  }\n\n  handleInputLink(event) {\n    this.setState({inputLink: event.target.value});\n  }\n\n  handleInputName(event) {\n    this.setState({inputName: event.target.value});\n  }\n\n  handleSubmit() {\n    this.postList()\n      .then(res => {\n        var updatedList = this.state.links\n        updatedList.unshift({\n          name: this.state.inputName,\n          link: this.state.inputLink,\n        })\n        this.setState({ inputLink: '' })\n        this.setState({ inputName: '' })\n        this.setState({ links: updatedList })\n      })\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    const list = this.state.links.map((value, index) =>\n      <div>\n        <ListItem key={index} name={value.name} link={value.link} /><Divider />\n      </div>\n    )\n\n    return (\n      <div>\n        <Container>\n          <h1>Goto</h1>\n          {/* Add text field */}\n          <Grid container spacing={3} >\n            <Grid item xs={8}>\n            <TextField id=\"input-link\" value={this.state.inputLink} onChange={this.handleInputLink} label=\"Add new shortcut link\" variant=\"filled\" fullWidth={true}/>\n            </Grid>\n            <Grid item xs={2}>\n            <TextField id=\"input-name\" value={this.state.inputName} onChange={this.handleInputName} label=\"Name (optional)\" variant=\"filled\" fullWidth={true}/>\n            </Grid>\n            <Grid item xs={2}>\n              <Button onClick={this.handleSubmit} variant=\"contained\" color=\"primary\" fullWidth={true} size=\"large\">Add</Button>\n            </Grid>\n          </Grid>\n\n          {/* All Link List */}\n          <Loading isActive={this.state.loading} />\n          <List>\n            <Divider />\n            {list}\n          </List>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}